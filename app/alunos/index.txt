from flask import Blueprint, request, jsonify

alunos_blueprint = Blueprint('alunos', __name__)

dados = {
    "alunos": [
        {"nome": "Lucas", "id": 15},
        {"nome": "Cícero", "id": 29},
    ],
    "professores": []
}

class AlunoNaoEncontrado(Exception):
    pass

def aluno_por_id(id_aluno):
    lista_alunos = dados['alunos']
    for dicionario in lista_alunos:
        if dicionario['id'] == id_aluno:
            return dicionario
    raise AlunoNaoEncontrado

def gerar_novo_id():
    """Gera um novo ID baseado no maior ID existente."""
    if not dados['alunos']:
        return 1
    return max(aluno['id'] for aluno in dados['alunos']) + 1

@alunos_blueprint.route('/alunos', methods=['GET'])
def get_alunos():
    return jsonify(dados['alunos'])

@alunos_blueprint.route('/alunos/<int:id_aluno>', methods=['GET'])
def get_aluno(id_aluno):
    try:
        aluno = aluno_por_id(id_aluno)
        return jsonify(aluno)
    except AlunoNaoEncontrado:
        return jsonify({'message': 'Aluno não encontrado'}), 404

@alunos_blueprint.route('/alunos', methods=['POST'])
def create_aluno():
    data = request.json

    # Validação simples do nome
    if 'nome' not in data or not isinstance(data['nome'], str):
        return jsonify({'message': 'Nome inválido ou ausente'}), 400

    novo_aluno = {
        'nome': data['nome'],
        'id': gerar_novo_id()
    }
    dados['alunos'].append(novo_aluno)
    return jsonify(novo_aluno), 201

@alunos_blueprint.route('/alunos/<int:id_aluno>', methods=['PUT'])
def update_aluno(id_aluno):
    data = request.json
    try:
        aluno = aluno_por_id(id_aluno)
        aluno.update(data)
        return jsonify(aluno)
    except AlunoNaoEncontrado:
        return jsonify({'message': 'Aluno não encontrado'}), 404

@alunos_blueprint.route('/alunos/<int:id_aluno>', methods=['DELETE'])
def delete_aluno(id_aluno):
    try:
        aluno = aluno_por_id(id_aluno)
        dados['alunos'].remove(aluno)
        return '', 204
    except AlunoNaoEncontrado:
        return jsonify({'message': 'Aluno não encontrado'}), 404
